# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Elixir CI

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    name: Build and test
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        pair:
          - elixir: 1.18.4
            otp: 28.0.2
          - elixir: 1.18
            otp: 27.2
          - elixir: 1.17
            otp: 27.2
          - elixir: 1.16
            otp: 26.2
          - elixir: 1.15
            otp: 26.2
          - elixir: 1.14
            otp: 25.3

    steps:
    - uses: actions/checkout@v4
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ matrix.pair.elixir }} # [Required] Define the Elixir version
        otp-version: ${{ matrix.pair.otp }}      # [Required] Define the Erlang/OTP version
    - name: Restore dependencies cache
      uses: actions/cache@v4
      with:
        path: deps
        key: ${{ runner.os }}-${{ matrix.pair.otp }}-${{ matrix.pair.elixir }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-
    - name: Install dependencies
      run: mix deps.get
    - name: Run tests
      run: MIX_ENV=test mix citest
    - name: Verify version
      run: |
        mix run -e "if(Testcontainers.Constants.library_version() == Mix.Project.config()[:version], do: IO.puts("OK"), else: System.halt(\"version mismatch\"))"

  test_examples:

    name: Test example projects
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: '1.18' # [Required] Define the Elixir version
        otp-version: '27.2'      # [Required] Define the Erlang/OTP version
    - name: Run example phoenix project tests
      run: |
       cd examples/phoenix_project
       mix deps.get
       MIX_ENV=test mix testcontainers.test
       MIX_ENV=prod mix release
    - name: Run example mix project tests
      run: |
        cd examples/mix_project
        mix deps.get
        mix test
